exit
@temp_arr
@temp.arr
@answer
exit
nearest_cells(@start)e
@start.checked
@start.checked?
exit
@grids[4].checked
@grids[4]
@grids[1]
nearest_cells(@start)
@grids.count
@grids.cell
@start.walls
nearest_cells(@start)
@start
nearest_cells(@start)
@shortest_path
@shortest_path.first
exit
@shortest_path.last
exit
@shortest_path.last
exit
@shortest_path
@shortest_path.last
exit
@shortest_path
next
@shortest_path
next
@shortest_path
next
@shortest_path
next
@shortest_path
next
@shortest_path
exit
@start
nearest_cell(@start)
exit
@coloums
@colums
@grids.count
@grids
@destination
@start.cost
@start
exit
@start.value
@start
exit
cell.value = 4
exit
cell.value = 0
cell.value
cell
exit
x >= y
x > y
y = 1
x= 1
nearest_cell(@start).value?
nearest_cell(@start).value
nearest_cell(@start).key
nearest_cell(@start).hey
nearest_cell(@start).class
@start
nearest_cell(@start)
exit
@start
nearest_cells(@start)
exit
@game_window.params
@game_window
exit
@current
@visited_cells.last
@visited_cells
@current
exit
@current
@visited_cells.last
@visited_cells
@visited_cell
exit
find_exit(@current).wallse
find_exit(@current)
exit
find_exit(@current)
exit
find_exit(@current)
exit
find_exit(@current)
@current
exit
@current.walls.index(false)
@current.walls
find_exit(@current)
@current
exit
find_exit(@current)
@current
exit
@current
exit
@current.walls.index(false)
@current.walls.reject{|wall| wall == true}
@current.walls.reject{|wall| wall == false}
@grids.select{|cell| cell.coloum_pos == 1 && cell.row_pos == 2}
@grids.find(where(coloum_pos: 1))
@grids.class
@current
exit
@current.walls.index(false)
@current.walls.select()
@current.walls.select(:false)
@current.walls.select
@current.walls.select(false)
@current.walls.find_all
@current.walls.find_all(false)
@current.walls.find(false).first
@current.walls.find(false)
@current.walls.find(false).last
@current.walls.find(false)[1]
@current.walls.find(false).times do |i| puts i end
@current.walls.find(false).first
@current.walls.find(false).class
@current.walls.find(false)
@current.find(false)
@current.index(false)
Cell.all.find_all{|cell| cell.coloum_pos == 1 && cell.row_pos == 2}
Cell.all.find_all{|cell| cell.coloum_pos == 1}
Cell.all.find_all{|cell| cell.coloums_pos == 1}
Cell.all.to_a.where(coloum_pos: 1)
Cell.all.to_a
Cell.all.where(coloum_pos: 1)
Cell.all
Cell.where(coloums_pos: 1)
Cell.where(:coloums_pos = 1)
@current.walls.all_index(false)
@current.walls.index(false).all
@current.walls.index(false)
@current.walls[1] = false
@current.walls[1]
@current.walls.index(false)
@current.walls
neighbours
next_cell
@current
exit
@grids
@current
next
neighbours[r]
@current
next
exit
next
exit
@current
next
exit
neighbours[r]
@current
next
neighbours[r]
@current
next
neighbours[r]
@current
next
neighbours[r]
@current
next
neighbours[r]
@current
next
@current
neighbours[r]
@current
next
neighbours[r]
@current
next
neighbours[r]
@current
next
neighbours[r]
@current
next
neighbours[r]
@current
next
neighbours[r]
@current
next
neighbours[r]
@current
next
neighbours[r]
r
@current
exit
@cell2
@game_window.remove_wall(@cell,@cell2)
@cell
exit
@current.wall
@current
exit
@current.walls_exist?
@current.walls_exist?[3] = 0
@current.walls_exist?
self
exit
neighbours[r].walls_exist?[3] = false
neighbours[r].walls_exist?
neighbours[r].walls_exist?[3] = false
neighbours[r].walls_exist?
neighbours[r]
neighbours[r].params
neighbours[r].@w
neighbours[r].w
neighbours[r]
r
@current
exit
@current
neighbours
exit
neighbours
exit
eixt
@grids.count
@grids
@grids[10].row_pos
@grids[10].coloum_pos
@current
exit
@grids
@current
next
@current
next
@current.visited
@current.visit
@current
next
@current
next
@current
@current.visited
