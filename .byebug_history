exit
@current
neighbours
exit
neighbours
exit
eixt
@grids.count
@grids
@grids[10].row_pos
@grids[10].coloum_pos
@current
exit
@grids
@current
next
@current
next
@current.visited
@current.visit
@current
next
@current
next
@current
@current.visited
@current.visit
@current
exit
@grids[0]
@grids[1]
@grids[2]
@current
next
@current
next
@current
next
draw_rect(@current.coloum_pos,@current.row_pos,40,40,@visite_color)
raw_rect(@current.coloum_pos,@current.row_pos,40,40,@visite_color)
@current
next
@current
next
@grids[0]
@current
exit
neighbours
next
@current
next
r
next
@current
neighbours
neigbours
next 5
next 4
next 3
neighbours
next
r
next
neighbours.length
next
neighbours
@current
exit
next
@grids.include?(nil)
neighbours
@current
next
@current
next
r
next
r
next
rand(neighbours.length)
neighbours.length
rand(2)
rand(1)
neighbours[2]
rand(0..2)
neighbours.length
rand(0..2)
neighbours.length
neighbours
@grids.include?(nil)
@grids.inclunde?(nil)
@current
exit
@current.check_neighbours(@grids,@coloums)
exit
@grids[nil]
@grids
@coloums
@current.check_neighbours(@grids,@coloums)
@current
@current.check_neighbours(@grids,@coloums + 1)
exit
@current.check_neighbours(@grids,@coloums + 1)
exit
eixt
@current.check_neighbours(@grids,@coloums + 1)
exit
@current.check_neighbours(@grids,@coloums + 1)
@current.check_neighbours(@grids,coloums + 1)
@grids.include?(nil)
@current
exit
@grids.include?(nil)
@current.check_neighbours(@grids,@coloums + 1)
@grids.include?(nil)
@current
exit
@grids
exit
@grids.include?(nil)
@grids.count
grids
@current
@grids.include?(nil)
@grids.match(nil)
@grids.find(nil)
@grids
exit
@grids.count
@grids
cell.walls_exist?[0]
cell
exit
@current
@current.check_neighbours(@grids,@coloums + 1)
@grids
0 + (@current.row_pos + 1) * @coloums
@current.row_pos
self
@coloums
@current.check_neighbours(@grids,@coloums)
exit
@grids
@current.check_neighbours(@grids,@coloums+1)
@current.check_neighbours(@grids,@coloums)
@current
exit
@grids.count
@grids
@current.check_neighbours(@grids,@coloums + 1)
exit
@current.check_neighbours(@grids,@coloums)
@current
exit
@grids.count
@grids
exit
@grids[20]
@grids[10]
@grids.count
grids.count
@grids
exit
@grids[30]
@grids[11]
@grids[10]
@grids[58]
@grids[59]
@grids[60]
@grids.count
grids.all
@grids
grids
exit
@grids[1]
@current
exit
0 * 12
0 + (0 - 1) * 12
-1 * 10
@grids.first
@grids.count
@rows
@coloums
grids
@current
exit
@current.check_neighbours(@grids,@coloums)
exit
@current.visited?
@current.visited
@current
exit
@current
@current.visited?
exit
@current.visited?(true)
@current.visited?
@current
exit
@current.visited?(true).save
@current.visited?
@current.visited?(true)
@current.visited?
exit
@current.visited?(true)
@current.visited?(false)
@current.visited?
@current
exit
x.save
x = cell.wall_exist?[1] = true
cell.wall_exist?[1]
cell.wall_exist?[1] = true
cell.wall_exist?[1]
cell.wall_exist?
cell
exit
@grids.first.top_wall
@grids.first
@grids
exit
@grids.first.top_wall
@grids.first
exit
@grids[3].top_wall
@grids[3]
@grids[2]
@grids
self.grids
grids.all
grids
exit
window.draw.draw_line
window.draw.x
window.width
window.height
window.draw.class
window.draw
window.class
exit
x.show
x.class
x
exit
draw_line
draw
self
